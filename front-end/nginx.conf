user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 8001;

        server_name localhost;

        # Statik dosyaları yönlendirme
        location /static/ {
            alias /usr/share/nginx/static/;  # front-end/assets klasörüne bağlanıyor
        }

        # Django uygulaması için proxy yönlendirme
        location / {
            proxy_pass http://django:8000;  # Django uygulamasına yönlendir
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}



# Bu nginx.conf dosyası, Nginx'in temel yapılandırma dosyasının genel bir örneğidir. Şimdi, her bir bölümün ne yaptığını adım adım açıklayalım:
# 1. user nginx;

#     Bu satır, Nginx'in hangi kullanıcıyla çalışacağını belirtir. Bu durumda, Nginx nginx kullanıcısı olarak çalışacak.
#     Amaç: Güvenlik amaçlı, Nginx'in çalıştırdığı işlemleri belirli bir kullanıcıyla sınırlandırarak sistemdeki izinleri kontrol altına almak.

# 2. worker_processes 1;

#     Bu satır, Nginx'in kullanacağı işçi süreçlerinin (worker processes) sayısını belirtir. Nginx, gelen istekleri işlemek için bir veya daha fazla işçi süreci kullanır. Bu örnekte, yalnızca bir işçi süreci kullanılıyor.
#     Amaç: Genellikle bu sayıyı, sunucunun sahip olduğu işlemci çekirdek sayısına göre ayarlamak en iyisidir, fakat düşük trafikli uygulamalar için tek bir işçi süreci yeterli olabilir.

# 3. error_log /var/log/nginx/error.log warn;

#     Bu satır, Nginx'in hata loglarını nereye yazacağına karar verir. Burada, hata logları /var/log/nginx/error.log dosyasına yazılacak ve log seviyesinin warn (uyarı) olacağı belirtilmiş.
#     Amaç: Nginx hata mesajları ve uyarılarının izlenmesi için uygun bir dosya belirler. warn seviyesi, genellikle hata mesajlarından daha hafif olan uyarıları içerir.

# 4. pid /var/run/nginx.pid;

#     Bu satır, Nginx'in çalıştığı işlemin PID (Process ID) dosyasını belirtir. Bu dosya, Nginx süreci çalışırken oluşturulur ve yönetilir.
#     Amaç: Nginx'in çalışma durumunu takip etmek ve gerektiğinde işlemi sonlandırabilmek için PID dosyasına ihtiyaç vardır.

# 5. events {}

#     Bu blok, Nginx'in etkinlik tabanlı yapılandırmasını yönetir. events bloğunun içinde, Nginx'in nasıl işlem yapacağına dair seçenekler belirlenebilir. Bu örnekte blok boş bırakılmıştır, ancak burada worker_connections gibi parametreler de belirtilebilir.
#     Amaç: Genellikle yüksek trafiğe sahip sunucular için bu bloğu özelleştirmek gerekir.

# 6. http {}

#     Bu blok, HTTP sunucusunun yapılandırmasını içerir. Nginx'in HTTP isteklerini nasıl yöneteceği ve nasıl işleyeceği bu blokta belirtilir.
#     Amaç: Tüm web ile ilgili yapılandırmalar bu blokta yapılır. Burada birçok önemli parametre tanımlanır.

# 7. log_format main ...

#     Bu satır, Nginx'in log formatını tanımlar. Burada, main adında bir log formatı belirlenmiş. Bu formatta, gelen isteklerle ilgili bilgiler şunlardır:
#         remote_addr: İstek yapan istemcinin IP adresi.
#         remote_user: İstemci tarafından sağlanan kullanıcı adı (eğer varsa).
#         time_local: İsteğin yapıldığı zaman.
#         request: İstek metoduyla URL ve protokol.
#         status: Sunucunun döndürdüğü yanıt kodu (örneğin 200, 404).
#         body_bytes_sent: Gönderilen bayt miktarı.
#         http_referer: Referans sayfası.
#         http_user_agent: Kullanıcının tarayıcı bilgisi.
#         http_x_forwarded_for: Eğer istek bir proxy'den geldiyse, orijinal istemcinin IP adresi.

#     Amaç: Nginx'in günlük kayıtlarında daha ayrıntılı bilgi sağlar, bu da hata ayıklama ve performans izleme için yararlıdır.

# 8. access_log /var/log/nginx/access.log main;

#     Bu satır, Nginx'in erişim loglarını hangi dosyaya kaydedeceğini belirtir. Burada, access.log dosyasına yazılacağı belirtilmiş ve main log formatı kullanılacaktır.
#     Amaç: Web sunucusu tarafından yapılan isteklerin izlenebilmesi amacıyla erişim logları oluşturulır.

# 9. sendfile on;

#     Bu satır, sendfile özelliğini etkinleştirir. sendfile, dosya sunmak için dosya sisteminden veri göndermeyi hızlandıran bir özelliktir. Nginx, büyük dosyaları (örneğin resimler veya videolar) istemciye doğrudan, sistem kaynaklarını daha az kullanarak iletebilir.
#     Amaç: Büyük dosyaların istemciye daha verimli bir şekilde iletilmesini sağlamak.

# 10. tcp_nopush on; ve tcp_nodelay on;

#     Bu iki satır, Nginx'in TCP ağ bağlantılarıyla nasıl davranacağını belirler.
#     tcp_nopush: Paketlerin daha verimli bir şekilde gönderilmesini sağlamak için kullanılabilir.
#     tcp_nodelay: Küçük verilerin ağ üzerinden hızlıca gönderilmesi için bu seçeneği açar.

# 11. keepalive_timeout 65;

#     Bu satır, bir bağlantının açık tutulma süresini belirler. Bu süre, istemci ve sunucu arasında bağlantının açık tutulduğu zaman dilimini tanımlar.
#     Amaç: Bağlantıların sürekli olarak tekrar açılmasını engelleyerek verimliliği artırmak.

# 12. types_hash_max_size 2048;

#     Bu satır, MIME türleri için kullanılan types_hash yapılandırmasının boyutunu belirtir.
#     Amaç: MIME türlerini daha verimli bir şekilde eşleştirebilmek.

# 13. include /etc/nginx/mime.types;

#     Bu satır, MIME türleri için Nginx'e dahili bir yapılandırma dosyasını dahil eder. Bu dosya, Nginx'e hangi dosya uzantılarının hangi MIME türlerine karşılık geldiğini söyler.
#     Amaç: Nginx'in doğru dosya türlerini doğru şekilde sunabilmesi için gerekli.

# 14. default_type application/octet-stream;

#     Bu satır, dosya türü tanımlanamayan dosyalar için varsayılan MIME türünü belirtir.
#     Amaç: Tanımlanamayan dosyalar için genel bir MIME türü sağlamak.

# 15. server {}

#     Bu bölüm, Nginx'in sunucu yapılandırmasını içerir. Her server bloğu, gelen bir HTTP isteğini işlemek için farklı bir sanal sunucu oluşturur. Bu blokta, isteklerin yönlendirilmesi, hangi portta dinleneceği, hangi dosyaların sunulacağı vb. ayarlanır.

# Açıklama:

#     listen 80;: Nginx bu sunucunun 80 numaralı portu dinlemesini sağlar (HTTP trafiği için varsayılan port).
#     server_name localhost;: Bu sunucu adı ile gelen istekleri kabul eder. localhost burada sadece bir örnektir, genellikle gerçek bir alan adı burada kullanılır.
#     location / {}: / dizini (yani kök) için yapılandırmalar yapılır. Bu örnekte, kök dizindeki istekler /usr/share/nginx/html dizininden sunuluyor ve index.html veya index.htm dosyaları kullanılacak.